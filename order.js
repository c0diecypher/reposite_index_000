const express = require('express');
const router = express.Router();
const bodyParser = require('body-parser');
const cors = require('cors');
const { EventEmitter } = require('events');
const emitter = new EventEmitter();
const User = require('./models'); 
const axios = require('axios');
router.use(express.json());
router.use(cors());

router.post('/get/payment', async (req, res) => {
    const { userId, order_id } = req.body;

    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
        
            const order = userOrderArray.find(order => order.order_id === order_id);
        
            if (order) {
                res.json({ status: order.status });
            } else {
                res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


router.post('/update/payment', async (req, res) => {
    const { userId, order_id } = req.body;
    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
        
            const order = userOrderArray.find(order => order.order_id === order_id);
        
            if (order) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
                // –ù–∞–ø—Ä–∏–º–µ—Ä, order.status = 'PAID';
                res.json({ status: order.status });
            } else {
                res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.get('/connect/payment', async (req, res) => {
        const { data } = req.query;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!data) {
            res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä data' });
            return;
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
        const requestData = JSON.parse(decodeURIComponent(data));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏ order_id –∏–∑ requestData
        const { userId, order_id } = requestData.data;
        
    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
        
            const order = userOrderArray.find(order => order.order_id === order_id);
        
            if (order) {
                    res.writeHead(200, {
                    'Content-Type': 'text/event-stream',
                    'Cache-Control': 'no-cache',
                    'Connection': 'keep-alive',
                    'Access-Control-Allow-Origin': 'https://zipperapp.vercel.app'
                });
            
                 emitter.on('newStatus', (status) => {
                        console.log('Emitted new status:', status);
                        res.write(`${JSON.stringify(status)} \n\n`);
                    });
                
                // –ó–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                emitter.emit('newStatus', order.status);
                
               
                
            } else {
                res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
    
//–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ–ø–ª–∞—á—É –≤ –∫–æ—Ä–∏–∑–∏–Ω–µ
router.post('/customer/settings/client/buy/offer/pay/basket', async (req, res) => {
    const { productId,queryId, price, size, name, userId, order_id, time } = req.body;
    
  
    // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    const allowedUserId = userId;
    if (userId !== allowedUserId) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', message: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.' });
    }

    try {
        const apikey = 'cpfmxaq0su2dy63v4g9zowjh';
        const project_id = '225';
        
        const ProductName = name;
        const ProductSize = size;
        ProductOrder = order_id;
        const ProductPrice = price.replace(/\s/g, '').replace(/\u00a0/g, '');
        
        const config = {
                  headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                  }
                };
        
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = user.userId;
            const userFio = user.userFio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const userAdress = user.userAdress || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const phoneNumber = user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const userCity = user.userCity || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const desc = `–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${ProductName}, 
                      —Ä–∞–∑–º–µ—Ä: ${ProductSize}, 
                      –§–ò–û: ${userFio}, 
                      –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ ${phoneNumber}
                      –ì–æ—Ä–æ–¥: ${userCity},
                      –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${userAdress}`;
            const params = `
      –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!
      üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
üßæ ${ProductName}, 
üéüÔ∏è ${ProductOrder}, 
üìè ${ProductSize}, 
üíé ${ProductPrice}.
      üöö –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
üë§ ${userFio},
üì± ${phoneNumber},
üèôÔ∏è ${userAdress},
üìç ${userCity}
ID: ${userId}.

Zipper App —Å–Ω–æ–≤–∞ –∂–¥–µ—Ç –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤! ‚ö°`;

            const dataToSend = {
                  project_id: project_id,
                  order_id: ProductOrder, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ order_id –∏–∑ req.body
                  amount: ProductPrice,
                  apikey: apikey,
                  desc: desc,
                  data: params,
              };
          
            const response = await axios.post('https://p2pkassa.online/api/v1/link', dataToSend, config);
            const result = response.data;
             
            if (result && result.link && result.id) {
              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
              const paymentUrl = result.link;
              paymentId = result.id;
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π POST-–∑–∞–ø—Ä–æ—Å

              const dataToPayment = {
                id: paymentId,
                project_id: project_id,
                apikey: apikey
              };
              const getPayment = await axios.post('https://p2pkassa.online/api/v1/getPayment', dataToPayment, config);
              const resGetPayment = getPayment.data;

              
               return res.json({ paymentUrl });  
            } else {
              
              console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ id –∏ link –≤ –æ—Ç–≤–µ—Ç–µ');
              
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç 404
            return res.status(400).json({ error: '–û—à–∏–±–∫–∞', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        console.error(error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

//–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–∞–Ω–Ω—ã–µ —Å PAID
router.post('/load/basket/paid', async (req, res) => {
    const { userId } = req.body;

    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });
       
        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
                
            // –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º 'WAIT'
            const waitOrders = userOrderArray.filter(order => ['PAID', 'SENT', 'TRANSITCN', 'TRANSITRU', 'DELIVERED'].includes(order.status));
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º map
            const mappedData = waitOrders.map(order => {
                if (order) {
                    // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    return {
                        id: order.id,
                        name: order.name,
                        order_id: order.order_id,
                        price: order.price,
                        size: order.size,
                        status: order.status,
                        time: order.time,
                    };
                }
                return null;
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
            res.status(200).json(mappedData);
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', error);
        res.status(200).json([]);
    }
});

router.get('/connect/bonus', async (req, res) => {
    res.setHeader('Access-Control-Allow-Origin', 'https://zipperapp.vercel.app');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.writeHead(200,{
        'Connection': 'keep-alive',
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
    })
    emitter.on('newBonus', (bonus) => {
        console.log('Emitted new status:', bonus);
        res.write(`data: ${JSON.stringify(bonus)} \n\n`)
    })
});

router.post('/get/bonus', async (req, res) => {
    const { userId } = req.body;
    console.log(userId);
    try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = await User.findOne({ where: { userId: userId.toString() } });

    if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const pq = user.userBonus;
    emitter.emit('newBonus', pq );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    return res.status(200).send('OK');
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /get/bonus:', error);
    return res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
}
    
});

router.get('/connect/basket', async (req, res) => {
    res.setHeader('Access-Control-Allow-Origin', 'https://zipperapp.vercel.app');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.writeHead(200,{
        'Connection': 'keep-alive',
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
    })
    emitter.on('newBasket', (basket) => {
        console.log('Emitted new status:', basket);
        res.write(`data: ${JSON.stringify(basket)} \n\n`)
    })
});

router.post('/get/basket', async (req, res) => {
    const { userId } = req.body;
    console.log(userId);
    try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = await User.findOne({ where: { userId: userId.toString() } });

    if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
                
            // –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º 'WAIT'
            const waitOrders = userOrderArray.filter(order => order.status === 'WAIT');
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º map
            const mappedData = waitOrders.map(order => {
                if (order) {
                    // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    return {
                        id: order.id,
                        name: order.name,
                        order_id: order.order_id,
                        price: order.price,
                        size: order.size,
                        status: order.status,
                        time: order.time,
                    };
                }
                return null;
            });
    
    console.log(mappedData);
    emitter.emit('newBasket', mappedData );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    return res.status(200).send('OK');
} else {
  res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
}
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', error);
        res.status(200).json([]);
    }
    
});

router.post('/load/basket', async (req, res) => {
    const { userId } = req.body;

    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });
        
        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
                
            // –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º 'WAIT'
            const waitOrders = userOrderArray.filter(order => order.status === 'WAIT');
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º map
            const mappedData = waitOrders.map(order => {
                if (order) {
                    // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    return {
                        id: order.id,
                        name: order.name,
                        order_id: order.order_id,
                        price: order.price,
                        size: order.size,
                        status: order.status,
                        time: order.time,
                    };
                }
                return null;
            });
            

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
            res.status(200).json(mappedData);
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', error);
        res.status(200).json([]);
    }
});

module.exports = router;
