const express = require('express');
const router = express.Router();
const bodyParser = require('body-parser');
const cors = require('cors');
const { EventEmitter } = require('events');
const emitter = new EventEmitter();
const User = require('./models'); 
const axios = require('axios');
router.use(express.json());
router.use(cors());

router.post('/get/payment', async (req, res) => {
    const { userId, order_id } = req.body;

    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
        
            const order = userOrderArray.find(order => order.order_id === order_id);
        
            if (order) {
                res.json({ status: order.status });
            } else {
                res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.get('/get/status', async (req, res) => {
    const { userId, order_id } = req.query;

    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
        
            const order = userOrderArray.find(order => order.order_id === order_id);
        
            if (order) {
                res.json({ status: order.status });
            } else {
                res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.get('/customer/rank/:userId', async (req, res) => {
    const { userId } = req.params; 

    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userRank = user.userRank;

            // –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ userRank –∫–∞–∫ –≤–∞–º –Ω—É–∂–Ω–æ
            
            return res.json({ userId: userId, subscription: userRank });
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.post('/update/payment', async (req, res) => {
    const { userId, order_id } = req.body;
    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
        
            const order = userOrderArray.find(order => order.order_id === order_id);
        
            if (order) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
                // –ù–∞–ø—Ä–∏–º–µ—Ä, order.status = 'PAID';
                res.json({ status: order.status });
            } else {
                res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–î–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –ø—É—Å—Ç—ã', error);
        res.status(200).json([]);
    }
});

    
//–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ–ø–ª–∞—á—É –≤ –∫–æ—Ä–∏–∑–∏–Ω–µ
router.post('/customer/settings/client/buy/offer/pay/basket', async (req, res) => {
    const { productId,queryId, price, size, name, userId, order_id, time } = req.body;
    
  
    // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    const allowedUserId = userId;
    if (userId !== allowedUserId) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', message: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.' });
    }

    try {
        const apikey = 'cpfmxaq0su2dy63v4g9zowjh';
        const project_id = '225';
        
        const ProductName = name;
        const ProductSize = size;
        ProductOrder = order_id;
        const ProductPrice = price.replace(/\s/g, '').replace(/\u00a0/g, '');
        
        const config = {
                  headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                  }
                };
        
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = user.userId;
            const userFio = user.userFio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const userAdress = user.userAdress || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const phoneNumber = user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const userCity = user.userCity || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const desc = `–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${ProductName}, 
                      —Ä–∞–∑–º–µ—Ä: ${ProductSize}, 
                      –§–ò–û: ${userFio}, 
                      –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ ${phoneNumber}
                      –ì–æ—Ä–æ–¥: ${userCity},
                      –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${userAdress}`;
            const params = `
      –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!
      üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
üßæ ${ProductName}, 
üéüÔ∏è ${ProductOrder}, 
üìè ${ProductSize}, 
üíé ${ProductPrice}.
      üöö –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
üë§ ${userFio},
üì± ${phoneNumber},
üèôÔ∏è ${userAdress},
üìç ${userCity}
ID: ${userId}.

Zipper App —Å–Ω–æ–≤–∞ –∂–¥–µ—Ç –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤! ‚ö°`;

            const dataToSend = {
                  project_id: project_id,
                  order_id: ProductOrder, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ order_id –∏–∑ req.body
                  amount: ProductPrice,
                  apikey: apikey,
                  desc: desc,
                  data: params,
              };
          
            const response = await axios.post('https://p2pkassa.online/api/v1/link', dataToSend, config);
            const result = response.data;
             
            if (result && result.link && result.id) {
              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
              const paymentUrl = result.link;
              paymentId = result.id;
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π POST-–∑–∞–ø—Ä–æ—Å

              const dataToPayment = {
                id: paymentId,
                project_id: project_id,
                apikey: apikey
              };
              const getPayment = await axios.post('https://p2pkassa.online/api/v1/getPayment', dataToPayment, config);
              const resGetPayment = getPayment.data;

              
               return res.json({ paymentUrl });  
            } else {
              
              console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ id –∏ link –≤ –æ—Ç–≤–µ—Ç–µ');
              
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç 404
            return res.status(400).json({ error: '–û—à–∏–±–∫–∞', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        console.error(error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});



router.get("/customer/bonus/:userId", async (req, res) => {
  const { userId } = req.params;

  try {
    let user = await User.findOne({ where: { userId: userId.toString() } });

    if (user) {
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–Ω—É—Å–∞ –≤ –æ—Ç–≤–µ—Ç–µ
      const bonus = user.userBonus;

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—ã (`referralIds`), –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –±–æ–Ω—É—Å—ã
      const referralIds = JSON.parse(user.referralId);
      if (Array.isArray(referralIds) && referralIds.length > 0) {
        for (const referral of referralIds) {
          const referralId = referral.referralId;

          if (referral.check) {
            continue;
          }

          const referredUser = await User.findOne({
            where: { userId: referralId.toString() },
          });

          if (referredUser) {
            const userOrderArray = JSON.parse(referredUser.userOrder);

            if (userOrderArray !== null && userOrderArray.length > 0) {
              for (const order of userOrderArray) {
                if (order.status === "TRANSITRU" && !order.flag) {
                  // –ï—Å–ª–∏ —Ñ–ª–∞–≥ —Ç—Ä—É, –Ω–∞—á–∏—Å–ª—è–µ–º 500, –∏–Ω–∞—á–µ 100
                  const bonusToAdd = referral.check ? 100 : 500;

                  // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
                  const currentBonus = parseInt(user.userBonus) || 0;
                    user.userBonus = (currentBonus + bonusToAdd).toString();
                    
                    // –ü–æ–º–µ—á–∞–µ–º order –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
                    order.flag = true;
                }
              }
                    referral.check = true;
                  referredUser.userOrder = JSON.stringify(userOrderArray);
                  referral.check = true;
                await referredUser.save();
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ ${bonusToAdd}`);
            return res.status(200).json({ bonus, message: "OK" });
            }
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "TRANSITRU"
        const userOrderArray = JSON.parse(user.userOrder);
        if (userOrderArray !== null && userOrderArray.length > 0) {
          for (const order of userOrderArray) {
            if (order.status === "TRANSITRU" && !order.flag) {
              // –î–æ–±–∞–≤–ª—è–µ–º 100 –∑–∞ –∫–∞–∂–¥—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
              const currentBonus = parseInt(user.userBonus) || 0;
              const bonus = user.userBonus = (currentBonus + 100).toString();

              // –ü–æ–º–µ—á–∞–µ–º order –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
              order.flag = true;
             user.userOrder = JSON.stringify(userOrderArray);
              await user.save();
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ +100`);
            return res.status(200).json({ bonus, message: "OK" });
                
            }
          }
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –±–æ–Ω—É—Å–æ–º
      return res.status(200).json({ bonus, message: "OK" });
    } else {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /get/bonus:", error);
    return res.status(500).json({ message: "ERROR" });
  }
});


router.get('/customer/basket/:userId', async (req, res) => {
    const { userId } = req.params;
    console.log(userId);
    try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
                
            // –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º 'WAIT'
            const waitOrders = userOrderArray.filter(order => order.status === 'WAIT');
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º map
            const mappedData = waitOrders.map(order => {
                if (order) {
                    // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    return {
                        id: order.id,
                        name: order.name,
                        order_id: order.order_id,
                        price: order.price,
                        size: order.size,
                        status: order.status,
                        time: order.time,
                    };
                }
                return null;
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return res.status(200).json({ userId, basket: mappedData });
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—É—Å—Ç—ã', error);
        res.status(200).json([]);
    }
});

router.get('/customers/user/basket/delete/item', async (req, res) => { 
    const { userId, orderId, productId } = req.query;
try {
    const user = await User.findOne({ where: { userId: userId.toString() } });

    if (user) {
        const userOrderArray = JSON.parse(user.userOrder);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º order_id
        const itemToRemove = userOrderArray.find(item => item.order_id === orderId);

        if (itemToRemove) {
            // –ü–æ–ª—É—á–∞–µ–º saveUserBonus –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
            const saveUserBonus = Number(itemToRemove.saveBonus) || 0;
            const getUserBonus = Number(itemToRemove.newBonus) || 0;

            if (getUserBonus === 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º userBonus –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await User.update({ userBonus: Number(user.userBonus) + saveUserBonus }, { where: { userId: userId.toString() } });
            }
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
            userOrderArray.splice(userOrderArray.indexOf(itemToRemove), 1);

            // –û–±–Ω–æ–≤–ª—è–µ–º userOrder –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await User.update({ userOrder: JSON.stringify(userOrderArray) }, { where: { userId: userId.toString() } });

            res.status(200).json({ success: true, message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
        } else {
            res.status(404).json({ error: '–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º order_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        }
    } else {
        res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
}
});
            

router.get('/customer/basketpaid/:userId', async (req, res) => {
    const { userId } = req.params; // –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL, –∞ –Ω–µ –∏–∑ body
    try {
        const user = await User.findOne({ where: { userId: userId.toString() } });
        if (user) {
            const userOrderArray = JSON.parse(user.userOrder);
            // –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º 'PAID'
            const waitOrders = userOrderArray.filter(order => ['PAID', 'SENT', 'TRANSITCN', 'TRANSITRU', 'DELIVERED'].includes(order.status));
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º map
            const mappedData = waitOrders.map(order => {
                if (order) {
                    // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    return {
                        id: order.id,
                        name: order.name,
                        order_id: order.order_id,
                        price: order.price,
                        size: order.size,
                        status: order.status,
                        time: order.time,
                    };
                }
                return null;
            });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º res.json() –≤–º–µ—Å—Ç–æ emitter.emit
            res.json(mappedData);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            // res.status(200).send('OK');
        } else {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–î–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã –ø—É—Å—Ç—ã', error);
        res.status(200).json([]);
    }
});

router.get('/connect/discount', async (req, res) => {
    res.setHeader('Access-Control-Allow-Origin', 'https://zipperapp.vercel.app');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.writeHead(200,{
        'Connection': 'keep-alive',
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
    })
    emitter.on('newDiscount', (discount) => {
        res.write(`data: ${JSON.stringify(discount)} \n\n`)
    })
});

router.post('/get/discount', async (req, res) => {
  const { userId } = req.body;
  console.log(userId);
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    let user = await User.findOne({ where: { userId: userId.toString() } });

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ JSON –≤ –æ–±—ä–µ–∫—Ç
    const referralIds = JSON.parse(user.referralId);

    if (!Array.isArray(referralIds) || referralIds.length === 0) {
          return res.status(200).send('NO');
        }

    
   const discount = user.referralId;
    emitter.emit('newDiscount', discount);
    return res.status(200).send('OK');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /get/bonus:', error);
    return res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

module.exports = router;
