const express = require('express');
const router = express.Router();
const bodyParser = require('body-parser');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid')
const { EventEmitter } = require('events');
const emitter = new EventEmitter();
const User = require('./models'); 
const axios = require('axios');
const crypto = require("crypto")
router.use(express.json());
router.use(cors());

	let status = null
	let paymentId = null
	let ProductOrder = null
	router.post("/customer/pay/subscription", async (req, res) => {
		const {
			productId,
			queryId,
			price,
			name,
			userId,
			order_id
		} = req.body
		console.log(productId, queryId, price, name, userId, order_id)

		// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
		const allowedUserId = userId
		if (userId !== allowedUserId) {
			return res
				.status(403)
				.json({
					error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
					message: "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
				})
		}

		try {
			const apikey = "cpfmxaq0su2dy63v4g9zowjh"
			const project_id = "225"
			console.log(project_id, apikey)
			const ProductName = name
			ProductOrder = order_id
			const ProductPrice = price
			console.log(ProductPrice)
			console.log(ProductOrder)
			console.log(ProductName)
			const config = {
				headers: {
					"Content-Type": "application/x-www-form-urlencoded",
				},
			}

			// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const user = await User.findOne({ where: { userId: userId.toString() } })

			if (user) {
				
				// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const userId = user.userId
				const desc = `
    –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${ProductName},`
				const params = `
      –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!
      üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
üßæ ${ProductName}, 
üéüÔ∏è ${ProductOrder}, 
üíé ${ProductPrice}.
ID: ${userId}.

Zipper App —Å–Ω–æ–≤–∞ –∂–¥–µ—Ç –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤! ‚ö°`

				const dataToSend = {
					project_id: project_id,
					order_id: ProductOrder, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ order_id –∏–∑ req.body
					amount: ProductPrice,
					apikey: apikey,
					desc: desc,
					data: params,
				}

				const response = await axios.post(
					"https://p2pkassa.online/api/v1/link",
					dataToSend,
					config
				)
				const result = response.data
				console.log(result)
				if (result && result.link && result.id) {
					// –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
					const paymentUrl = result.link
					paymentId = result.id
					console.log(paymentUrl)
					console.log(paymentId)
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π POST-–∑–∞–ø—Ä–æ—Å

					const dataToPayment = {
						id: paymentId,
						project_id: project_id,
						apikey: apikey,
					}
					const getPayment = await axios.post(
						"https://p2pkassa.online/api/v1/getPayment",
						dataToPayment,
						config
					)
					const resGetPayment = getPayment.data

					console.log(resGetPayment)

					const match = resGetPayment.match(/\"status\":\"([^"]+)\"/)
					status = match ? match[1] : null

					console.log("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:", status)
					let currentOrders = user.userOrder ? JSON.parse(user.userOrder) : []

					// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
					const newOrder = {
						id: productId,
						name: name,
						order_id: order_id,
						price: price,
						status: status,
					}

					const updatedOrders = currentOrders.concat(newOrder)
					console.log("currentOrders before update:", currentOrders)
					// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Users
					await User.update(
						{
							userOrder: JSON.stringify(updatedOrders),
						},
						{
							where: { userId: userId },
						}
					)

					console.log("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

					// –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π POST-–∑–∞–ø—Ä–æ—Å
					return res.json({ paymentUrl })
				} else {
					console.log("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ id –∏ link –≤ –æ—Ç–≤–µ—Ç–µ")
				}
			} else {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç 404
				return res
					.status(400)
					.json({ error: "–û—à–∏–±–∫–∞", message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." })
			}
		} catch (error) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
			console.error(error)
			return res
				.status(500)
				.json({ error: "–û—à–∏–±–∫–∞", message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." })
		}
	})
	router.post("/customer/pay/subscription/get", async (req, res) => {
		const apikey = "cpfmxaq0su2dy63v4g9zowjh"
		const project_id = "225"
		const config = {
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
			},
		}
		const dataToPayment = {
			id: paymentId,
			project_id: project_id,
			apikey: apikey,
		}
		const getPayment = await axios.post(
			"https://p2pkassa.online/api/v1/getPayment",
			dataToPayment,
			config
		)
		const resGetPayment = getPayment.data

		console.log(resGetPayment)

		const match = resGetPayment.match(/\"status\":\"([^"]+)\"/)
		status = match ? match[1] : null

		console.log("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:", status)
	})



module.exports = router;
