const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const events = require('events');
const cors = require('cors');
const https = require('https');
const crypto = require('crypto');
const bodyParser = require('body-parser');
const token = process.env.TELEGRAM_BOT_TOKEN;
const { validate } = require('@twa.js/init-data-node');
const User = require('./models'); 
const fs = require('fs');
const axios = require('axios');
const path = require('path'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É path
const bot = new TelegramBot(token, {polling: true});
const app = express();
const emitter = new events.EventEmitter();
app.use(express.json());
app.use(cors());
const start = `‚ö°<strong>ZipperApp</strong> - —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞!
\n\
üîç <strong>–ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞</strong>
–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –±–æ–ª–µ–µ 8500 —Å—Ç–∏–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏–∑ Poizon —Å –ø–æ–ª–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö.
\n\
üë©‚Äçüíº <strong>–° –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</strong>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –º–æ–¥–µ–ª—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ –ø–æ–ª—É—á–∏ —Ü–µ–Ω—É –Ω–∞ 30-50% –¥–µ—à–µ–≤–ª–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏!
\n\
–ü–æ–∫—É–ø–∞–π—Ç–µ —Å—Ç–∏–ª—å–Ω–æ –∏ –≤—ã–≥–æ–¥–Ω–æ —Å <strong>ZipperApp!</strong>`
;

let userId = '';
let photoUrl = '';

app.post('/validate-initdata', async (req, res) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('twa-init-data')) {
    return res.status(400).json({ success: false, error: 'Invalid header Authorization' });
  }

  const initData = authHeader.replace('twa-init-data ', '');
  console.log('initData logs:', initData);

  try {
    validate(initData, token);
    console.log(`validate: ${validate}`);
    const decodedData = decodeURIComponent(initData);

    console.log(decodedData);

    const userMatch = /user=([^&]+)/.exec(decodedData);
    if (userMatch) {
      const userData = JSON.parse(userMatch[1]);

      const existingUser = await User.findOne({ where: { userId: userData.id.toString() } });

      if (existingUser) {
        if (
          existingUser.first_name !== userData.first_name ||
          existingUser.last_name !== userData.last_name ||
          existingUser.username !== userData.username
        ) {
          await existingUser.update({
            first_name: userData.first_name,
            last_name: userData.last_name,
            username: userData.username,
          });

          console.log(userData, '–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
        } else {
          console.log(userData, '–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
        }
      } else {
        const user = {
          userId: userData.id.toString(),
          first_name: userData.first_name,
          last_name: userData.last_name,
          username: userData.username,
        };

        await User.create(user);

        console.log('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', userData);
      }
      
    }
      res.json({ success: true, message: 'Authorized valid' });
    }catch (error) {
      res.status(400).json({ success: false, error: error.message });
    }
  });

const webAppUrl = 'https://zipperapp.vercel.app/'

bot.on('message', async(msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  console.log(chatId);
    if(text === '/start'){
        await bot.sendMessage(chatId,start,{
            reply_markup: {
                inline_keyboard: [
                    [{text: 'Open App', web_app: {url: webAppUrl}}]
                ]
            },
            parse_mode: 'HTML'
        })

      
    }
});

app.post('/customer/settings/client/buy/offer', async (req, res) => {
    const { queryId, price, size, name, userId, order_id } = req.body;
    console.log(queryId, price, size, name, userId, order_id);
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ where: { userId: userId.toString() } });

    if (user) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userFio = user.userFio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const userAdress = user.userAdress || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const phoneNumber = user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const userCity = user.userCity || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        try {
            await bot.answerWebAppQuery(queryId, {
                type: 'article',
                id: userId,
                title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
                input_message_content: {
                    message_text: `
        –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π! 
      üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
üéüÔ∏è –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order_id}
üßæ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}
üíé –¶–µ–Ω–∞: ${price}, 
üìè –†–∞–∑–º–µ—Ä: ${size} EU.

      üöö –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
üì± –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: ${phoneNumber}, 
üë§ –§–ò–û: ${userFio},
üèôÔ∏è –ì–æ—Ä–æ–¥: ${userCity},
üìç –ê–¥—Ä–µ—Å –≤—ã–¥–∞—á–∏: ${userAdress}

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å zipper app ! ‚ö°
                    `
                }
            });
            return res.status(200).json({});
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            console.error(error);
            return res.status(500).json({});
        }
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç 404
        return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});
let status = null;
let paymentId = null;
app.post('/customer/settings/client/buy/offer/pay', async (req, res) => {
    const { queryId, price, size, name, userId, order_id } = req.body;
    console.log(queryId, price, size, name, userId, order_id);
  
    // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    const allowedUserId = userId;
    if (userId !== allowedUserId) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', message: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.' });
    }

    try {
        const apikey = 'cpfmxaq0su2dy63v4g9zowjh';
        const project_id = '225';
        console.log(project_id, apikey);
        const ProductName = name;
        const ProductSize = size;
        const ProductOrder = order_id;
        const ProductPrice = price.replace(/\s/g, '').replace(/\u00a0/g, '');
        console.log(ProductPrice);
        console.log(ProductOrder);
        console.log(ProductSize);
        console.log(ProductName);
        const config = {
                  headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                  }
                };
        
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await User.findOne({ where: { userId: userId.toString() } });

        if (user) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = user.userId;
            const userFio = user.userFio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const userAdress = user.userAdress || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const phoneNumber = user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const userCity = user.userCity || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const desc = `–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${ProductName}, 
                      —Ä–∞–∑–º–µ—Ä: ${ProductSize}, 
                      –§–ò–û: ${userFio}, 
                      –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ ${phoneNumber}
                      –ì–æ—Ä–æ–¥: ${userCity},
                      –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${userAdress}`;
            const params = `
      –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!
      üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
üßæ ${ProductName}, 
üéüÔ∏è ${ProductOrder}, 
üìè ${ProductSize}, 
üíé ${ProductPrice}.
      üöö –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
üë§ ${userFio},
üì± ${phoneNumber},
üèôÔ∏è ${userAdress},
üìç ${userCity}
ID: ${userId}.

Zipper App —Å–Ω–æ–≤–∞ –∂–¥–µ—Ç –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤! ‚ö°`;

            const dataToSend = {
                  project_id: project_id,
                  order_id: ProductOrder, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ order_id –∏–∑ req.body
                  amount: ProductPrice,
                  apikey: apikey,
                  desc: desc,
                  data: params,
              };
          
            const response = await axios.post('https://p2pkassa.online/api/v1/link', dataToSend, config);
            const result = response.data;
             console.log(result);
            if (result && result.link && result.id) {
              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
              const paymentUrl = result.link;
              paymentId = result.id;
              console.log(paymentUrl);
              console.log(paymentId);
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π POST-–∑–∞–ø—Ä–æ—Å

              const dataToPayment = {
                id: paymentId,
                project_id: project_id,
                apikey: apikey
              };
              const getPayment = await axios.post('https://p2pkassa.online/api/v1/getPayment', dataToPayment, config);
              const resGetPayment = getPayment.data;
              
              console.log(resGetPayment);

              const match = resGetPayment.match(/\"status\":\"([^"]+)\"/);
              status = match ? match[1] : null;
              
              console.log('–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:', status);
              
              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π POST-–∑–∞–ø—Ä–æ—Å
               return res.json({ paymentUrl });  
            } else {
              
              console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ id –∏ link –≤ –æ—Ç–≤–µ—Ç–µ');
              
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç 404
            return res.status(400).json({ error: '–û—à–∏–±–∫–∞', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        console.error(error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

app.get('/get/payment', (req, res) => {
  res.json({id: paymentId, status: status});

});

app.post("/get/payment", async (req, res) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  paymentData = req.body;

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É
  res.json(paymentData);
});


// –ò—Å–ø–æ–ª—å–∑—É–µ–º bodyParser –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.post('/customer/client/pay/status', async (req, res) => {
    // –í–∞—à –∫–æ–¥ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞
    const { id, apikey, order_id, project_id, amount, createDateTime, data } = req.body;
    console.log( id, apikey, order_id, project_id, amount, createDateTime, data);
    const sign = crypto
      .createHash('sha256')
      .update(`${id}:${order_id}:${project_id}:${apikey}`)
      .digest('hex');

    if (sign !== sign) {
      return res.status(400).send('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å');
    }

    if (data !== undefined && id !== undefined && order_id !== undefined && createDateTime !== undefined && amount !== undefined) {
    // –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
     console.log('–û–ø–ª–∞—á–µ–Ω–æ', { id, order_id, amount, createDateTime, data });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
  
  res.send('OK');
  const chatId = '204688184';
  const message = `–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω! Order ID: ${order_id}\n–°—É–º–º–∞: ${amount}`;
  bot.sendMessage(chatId, message);
    }
});

bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const contact = msg.contact;
  const userId = msg.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (contact.phone_number) {
    numberPhone = contact.phone_number;  
    User.findOne({ where: { userId: userId.toString() } }).then((user) => {
            if (user) {
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Ñ–∞–π–ª—ã
              user.update({ tgPhoneNumber: numberPhone }).then(() => {
                console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
              }).catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
              });
            } else {
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
              User.create({ userId: userId.toString(), tgPhoneNumber: numberPhone }).then(() => {
                console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');
              }).catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
              });
            }
          }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
          });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${numberPhone}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${numberPhone}`);
  } else {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
  }
});

app.get('/customer/settings/client/get/:userId', async (req, res) => {
  const userId = req.params.userId;

  try {
    // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –º–µ—Ç–æ–¥ –∏–ª–∏ ORM –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = await User.findOne({ where: { userId } });

    if (user) {
      const tgPhoneNumber = user.tgPhoneNumber;

      // –û—Ç–ø—Ä–∞–≤—å—Ç–µ userAdress –∏ userFio –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É
      res.json({
        userId,
        tgPhoneNumber,
      });
    } else {
      res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/getPhoneNumber', (req, res) => {
  // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  // –í –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –Ω–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  res.json({ userId: '', tgPhoneNumber: '' });
});

bot.on('message', async (msg) => {
  const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
  const chatId = msg.chat.id; // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
  if (msg.text === '/start') {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ getUserProfilePhotos –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.getUserProfilePhotos(userId, { limit: 1 }).then((result) => {
      const photos = result.photos;

      if (photos.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        const photoFile = photos[0][0];

        // –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        bot.getFile(photoFile.file_id).then((fileInfo) => {
          const fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
          console.log('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:', fileUrl);

          // –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          const downloadDir = path.join(__dirname, 'downloads');
          if (!fs.existsSync(downloadDir)) {
            fs.mkdirSync(downloadDir);
          }

          const filePath = path.join(downloadDir, `photo_${userId}.jpg`);

          // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º axios
          axios({
            method: 'get',
            url: fileUrl,
            responseType: 'stream',
          }).then((response) => {
            response.data.pipe(fs.createWriteStream(filePath));

            response.data.on('end', () => {
              console.log('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', filePath);

              // –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
              // –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
              User.findOne({ where: { userId: userId.toString() } }).then((user) => {
                if (user) {
                  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                  user.update({ filePath: filePath }).then(() => {
                    console.log('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
                  }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                  });
                } else {
                  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
                  User.create({ userId: userId.toString(), filePath: filePath }).then(() => {
                    console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
                  }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É:', error);
                  });
                }
              }).catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
              });
            });

            response.data.on('error', (error) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
            });
          });
        }).catch((error) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
        });
      } else {
        console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.');
      }
    }).catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã', error);
    });
  }
});

app.get('/customer/settings/client/photo/:userId', (req, res) => {
  const userId = req.params.userId;

  // –ü–æ–ª—É—á–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  User.findOne({ where: { userId } }).then((user) => {
    if (user && user.filePath) {
      const filePath = user.filePath;

      // –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
      res.sendFile(filePath);
    } else {
      res.status(404).send('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  });
});

app.get('/userProfile/:userId', (req, res) => {
  const userId = req.params.userId; // –ü–æ–ª—É—á–∏—Ç–µ userId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

  // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Sequelize –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
  User.findOne({ where: { userId } })
    .then((user) => {
      if (user) {
        // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª–∏–µ–Ω—Ç—É
        res.json({
          userId: user.userId,
          firstName: user.firstName,
          lastName: user.lastName,
          photoUrl: user.filePath, // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        });
      } else {
        res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    });
});


app.post('/customer/settings/client', async (req, res) => {
  const { userId, fullName, userPhone, address, userCity } = req.body;

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = await User.findOne({ where: { userId } });

    if (user) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
      await user.update({
        userFio: fullName,
        phoneNumber: userPhone,
        userAdress : address,
        userCity: userCity,
        // –î—Ä—É–≥–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å
      });
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = {
        userId,
        userFio: fullName,
        phoneNumber: userPhone,
        userAdress : address,
        userCity: userCity,
        // –î—Ä—É–≥–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
      };
      await User.create(newUser);
      console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');
    }

    return res.status(200).json({ message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

app.get('/customer/settings/client/:userId', async (req, res) => {
  const userId = req.params.userId;

  try {
    // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –º–µ—Ç–æ–¥ –∏–ª–∏ ORM –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = await User.findOne({ where: { userId } });

    if (user) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∏—Ç–µ userAdress –∏ userFio –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const phoneNumber = user.phoneNumber;
      const userFio = user.userFio;
      const userAdress = user.userAdress;
      const userCity = user.userCity;

      // –û—Ç–ø—Ä–∞–≤—å—Ç–µ userAdress –∏ userFio –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É
      res.json({
        userId,
        phoneNumber,
        userFio,
        userAdress,
        userCity,
      });
    } else {
      res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

const PORT = 8000;

app.listen(PORT, () => {
  console.log(`Server started on PORT ${PORT}`);
});
