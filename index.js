const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const https = require('https');

const token = '6597024566:AAGXwbkrq2CTnpxPSQIqTlqZQEK9Ur3SBR4';

const bot = new TelegramBot(token, { polling: true });
const app = express();

app.use(express.json());
app.use(cors());

const start = `‚ö°<strong>ZipperApp</strong> - —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞!
\n\
üîç <strong>–ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞</strong>
–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –±–æ–ª–µ–µ 8500 —Å—Ç–∏–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏–∑ Poizon —Å –ø–æ–ª–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö.
\n\
üë©‚Äçüíº <strong>–° –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</strong>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –º–æ–¥–µ–ª—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ –ø–æ–ª—É—á–∏ —Ü–µ–Ω—É –Ω–∞ 30-50% –¥–µ—à–µ–≤–ª–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏!
\n\
–ü–æ–∫—É–ø–∞–π—Ç–µ —Å—Ç–∏–ª—å–Ω–æ –∏ –≤—ã–≥–æ–¥–Ω–æ —Å <strong>ZipperApp!</strong>`;

const webAppUrl = 'https://zipperapp.vercel.app/';

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  if (text === '/start') {
    await bot.sendMessage(chatId, start, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'Open App', web_app: { url: webAppUrl } }],
        ],
      },
      parse_mode: 'HTML',
    });
  }
});

app.get('/', (req, res) => {
  res.send('Cannot GET /zipperapp');
});

app.get('/web-data', (req, res) => {
  res.send('GET –∑–∞–ø—Ä–æ—Å –∫ /web-data —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
});

app.post('/web-data', async (req, res) => {
  const { queryId, price } = req.body;
  try {
    await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
      input_message_content: {
        message_text: ` –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π, –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É ${price}`,
      },
    });
    return res.status(200).json({});
  } catch (e) {
    return res.status(500).json({});
  }
});

const PORT = 443; // –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç –Ω–∞ 443

// –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
const httpsServer = https.createServer(app);

httpsServer.listen(PORT, () => {
  console.log(`server started on PORT ${PORT}`);
});
