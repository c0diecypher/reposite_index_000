const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const token = process.env.TELEGRAM_BOT_TOKEN;
const { validate } = require('@twa.js/init-data-node');
const User = require('./models'); 
const bot = new TelegramBot(token, {polling: true});
const app = express();
app.use(express.json());
app.use(cors());
const start = `‚ö°<strong>ZipperApp</strong> - —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞!
\n\
üîç <strong>–ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞</strong>
–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –±–æ–ª–µ–µ 8500 —Å—Ç–∏–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏–∑ Poizon —Å –ø–æ–ª–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö.
\n\
üë©‚Äçüíº <strong>–° –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</strong>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –º–æ–¥–µ–ª—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ –ø–æ–ª—É—á–∏ —Ü–µ–Ω—É –Ω–∞ 30-50% –¥–µ—à–µ–≤–ª–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏!
\n\
–ü–æ–∫—É–ø–∞–π—Ç–µ —Å—Ç–∏–ª—å–Ω–æ –∏ –≤—ã–≥–æ–¥–Ω–æ —Å <strong>ZipperApp!</strong>`
;

app.post('/validate-initdata', async(req, res) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('twa-init-data')) {
    return res.status(400).json({ success: false, error: 'Invalid header Authorization' });
  }
  
  const initData = authHeader.replace('twa-init-data ', '');
  console.log('initData logs:', initData); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ

  try {
  
    validate(initData, token);
     
    const decodedData = decodeURIComponent(initData);

    console.log(decodedData);
    
    const userMatch = /user=([^&]+)/.exec(decodedData);
    if (userMatch) {
  const userData = JSON.parse(userMatch[1]);

  // –ü–æ–ª—É—á–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const existingUser = await User.findOne({ where: { userId: userData.id.toString() } });

  if (existingUser) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if (
      existingUser.first_name !== userData.first_name ||
      existingUser.last_name !== userData.last_name ||
      existingUser.username !== userData.username
    ) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å—å
      await existingUser.update({
        first_name: userData.first_name,
        last_name: userData.last_name,
        username: userData.username,
        photo_url: fileUrl,
      });

      console.log(userData, '–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π—Ç–µ
      console.log(userData, '–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
    }
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const user = {
      userId: userData.id.toString(),
      first_name: userData.first_name,
      last_name: userData.last_name,
      username: userData.username,
      photo_url: fileUrl,
    };

    await User.create(user);

    console.log('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', userData);
  }
   
  }
    res.json({ success: true, message: 'Authorized valid' });
  } catch (error) {
    res.status(400).json({ success: false, error: error.message });
  }
});

const webAppUrl = 'https://zipperapp.vercel.app/'

bot.on('message', async(msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
    if(text === '/start'){
        await bot.sendMessage(chatId,start,{
            reply_markup: {
                inline_keyboard: [
                    [{text: 'Open App', web_app: {url: webAppUrl}}]
                ]
            },
            parse_mode: 'HTML'
        })
    }
});

app.post('/web-data', async(req, res) => {
    const {queryId, price, size, name} = req.body;
    try {
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
            input_message_content: {
                message_text: `
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π! 
        üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: 
üßæ –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}
üíé –¶–µ–Ω–∞: ${price} ‚ÇΩ, 
üìè –†–∞–∑–º–µ—Ä: ${size} US.

        üöö –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
üì± –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏: ${phoneNumber}, 
üë§ –§–ò–û: ...., 
üìç –ê–¥—Ä–µ—Å –≤—ã–¥–∞—á–∏: ...

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å zipper app ! ‚ö°`
            }
        })
        return res.status(200).json({});
    } catch (e) {
        return res.status(500).json({})
    }
});

bot.on('contact', (msg) => {
  const chatId = msg.chat.id;
  const contact = msg.contact;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (contact.phone_number) {
    phoneNumber = contact.phone_number;  
    // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber}`);
  } else {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
  }
});

let phoneNumber = '';

app.get('/getPhoneNumber', (req, res) => {
  res.json({ phoneNumber });
});


bot.on('message', (msg) => {
  const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
  const chatId = msg.chat.id; // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /send
  if (msg.text === '/send') {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ getUserProfilePhotos –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.getUserProfilePhotos(userId).then((result) => {
      const photos = result.photos;

      if (photos.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        photoFile = photos[0][0];
        console.log('photo_url:', photoFile); //—Ñ–æ—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –µ–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É /start
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
        bot.sendPhoto(chatId, photoFile.file_id);
      } else {
        bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /send.');
      }
    }).catch((error) => {
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /send.');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /send:', error);
    });
  }
});

app.get('/api/getPhotoFile', (req, res) => {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º photoFile –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É
  res.send(photoFile.file_id);
});

let fileUrl = '';
console.log('photo_url:', fileUrl);
app.get('/api/getPhotoUrl', (req, res) => {
  if (photoFile) {
    bot.getFile(photoFile.file_id).then((fileInfo) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
      fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
      res.send(fileUrl);
    }).catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
      res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ');
    });
  } else {
    res.status(404).send('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
});

app.get('/fileUrl', (req, res) => {
  res.json({ fileUrl });
});

const PORT = 8000;

app.listen(PORT, () => {
  console.log(`Server started on PORT ${PORT}`);
});
